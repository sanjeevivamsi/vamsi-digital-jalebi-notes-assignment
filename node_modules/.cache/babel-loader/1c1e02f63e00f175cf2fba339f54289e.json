{"ast":null,"code":"export function textFormValidator() {\n  return {\n    required: \"This field is required\"\n  };\n}\nexport function emailFormValidator() {\n  return {\n    required: \"This field is required\",\n    maxLength: {\n      value: 30,\n      message: \"Email shouldnot be more than 30 characters long\"\n    },\n    validate: value => {\n      let pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return pattern.test(value) || \"Email is invalid\";\n    }\n  };\n}\nexport function passwordFormValidator() {\n  return {\n    required: \"This field is required\",\n    minLength: {\n      value: 8,\n      message: \"Password must be minimum 8 letters long\"\n    },\n    validate: value => {\n      return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value)) || \"Password must include a-z, A-Z, @..and 0-9\";\n    }\n  };\n}\nexport function confirmPasswordValidator(getValues) {\n  return {\n    required: \"This field is required\",\n    validate: value => value === getValues().password || \"passwords doesnt match\"\n  };\n}","map":{"version":3,"sources":["/Users/takasivenkatasandeep/Desktop/vamsi-sanjreevi-notes/src/FormValidators/FormValidator.js"],"names":["textFormValidator","required","emailFormValidator","maxLength","value","message","validate","pattern","test","passwordFormValidator","minLength","every","confirmPasswordValidator","getValues","password"],"mappings":"AAAA,OAAO,SAASA,iBAAT,GAA6B;AAClC,SAAO;AACLC,IAAAA,QAAQ,EAAE;AADL,GAAP;AAGD;AACD,OAAO,SAASC,kBAAT,GAA8B;AACnC,SAAO;AACLD,IAAAA,QAAQ,EAAE,wBADL;AAELE,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,OAAO,EAAE;AAFA,KAFN;AAMLC,IAAAA,QAAQ,EAAGF,KAAD,IAAW;AACnB,UAAIG,OAAO,GAAG,wJAAd;AACA,aAAOA,OAAO,CAACC,IAAR,CAAaJ,KAAb,KAAuB,kBAA9B;AACD;AATI,GAAP;AAWD;AACD,OAAO,SAASK,qBAAT,GAAiC;AACtC,SAAO;AACLR,IAAAA,QAAQ,EAAE,wBADL;AAELS,IAAAA,SAAS,EAAE;AAAEN,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAFN;AAGLC,IAAAA,QAAQ,EAAGF,KAAD,IAAW;AACnB,aACE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,cAA5B,EAA4CO,KAA5C,CAAmDJ,OAAD,IAChDA,OAAO,CAACC,IAAR,CAAaJ,KAAb,CADF,KAEK,4CAHP;AAKD;AATI,GAAP;AAWD;AACD,OAAO,SAASQ,wBAAT,CAAkCC,SAAlC,EAA6C;AAClD,SAAO;AACLZ,IAAAA,QAAQ,EAAE,wBADL;AAELK,IAAAA,QAAQ,EAAGF,KAAD,IACRA,KAAK,KAAKS,SAAS,GAAGC,QAAtB,IAAkC;AAH/B,GAAP;AAKD","sourcesContent":["export function textFormValidator() {\n  return {\n    required: \"This field is required\",\n  };\n}\nexport function emailFormValidator() {\n  return {\n    required: \"This field is required\",\n    maxLength: {\n      value: 30,\n      message: \"Email shouldnot be more than 30 characters long\",\n    },\n    validate: (value) => {\n      let pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return pattern.test(value) || \"Email is invalid\";\n    },\n  };\n}\nexport function passwordFormValidator() {\n  return {\n    required: \"This field is required\",\n    minLength: { value: 8, message: \"Password must be minimum 8 letters long\" },\n    validate: (value) => {\n      return (\n        [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every((pattern) =>\n          pattern.test(value)\n        ) || \"Password must include a-z, A-Z, @..and 0-9\"\n      );\n    },\n  };\n}\nexport function confirmPasswordValidator(getValues) {\n  return {\n    required: \"This field is required\",\n    validate: (value) =>\n      value === getValues().password || \"passwords doesnt match\",\n  };\n}\n"]},"metadata":{},"sourceType":"module"}