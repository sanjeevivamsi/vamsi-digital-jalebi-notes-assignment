{"ast":null,"code":"import app from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nconst config = {\n  apiKey: \"AIzaSyD0r_4OlEFv8MKXzZtOcp0_FSalyWxvk8c\",\n  authDomain: \"vamsi-digital-jalebi-notes.firebaseapp.com\",\n  projectId: \"vamsi-digital-jalebi-notes\",\n  storageBucket: \"vamsi-digital-jalebi-notes.appspot.com\",\n  messagingSenderId: \"1031588269195\",\n  appId: \"1:1031588269195:web:8e44df325bd28c1b3c988e\",\n  measurementId: \"G-Z72WY769T3\"\n};\napp.initializeApp(config);\nconst firebaseDb = app.firestore();\nexport default app;\nexport async function addUser(email, password) {\n  try {\n    let userData = await app.auth().createUserWithEmailAndPassword(email, password);\n    await firebaseDb.collection(\"users\").doc(userData.user.uid).set({\n      email,\n      password,\n      createdAt: app.firestore.FieldValue.serverTimestamp()\n    });\n  } catch (error) {\n    alert(error.message);\n  }\n}\nexport async function logoutUser() {\n  try {\n    await app.auth().signOut();\n  } catch (err) {\n    alert(err.message);\n  }\n}\nexport async function loginUser(email, password) {\n  try {\n    await app.auth().signInWithEmailAndPassword(email, password);\n  } catch (error) {\n    alert(error.message);\n  }\n}\nexport async function addNote(noteData) {\n  const res = await firebaseDb.collection(\"notes\").add({ ...noteData,\n    createdAt: app.firestore.FieldValue.serverTimestamp()\n  });\n  return res.id;\n}\nexport async function getUserNotes(id) {\n  let data = [];\n  let userdata = await firebaseDb.collection(\"notes\").where(\"userId\", \"==\", id).orderBy(\"createdAt\", \"desc\").get();\n  userdata.forEach(doc => {\n    data = [...data, {\n      id: doc.id,\n      text: doc.data().text,\n      userId: doc.data().userId\n    }];\n  });\n  return data;\n}\nexport async function getNote(id) {\n  let data;\n  let doc = await firebaseDb.collection(\"notes\").doc(id).get();\n  data = {\n    id: doc.id,\n    text: doc.data().text,\n    userId: doc.data().userId\n  };\n  return data;\n}\nexport async function deleteNote(id) {\n  await firebaseDb.collection(\"notes\").doc(id).delete();\n}","map":{"version":3,"sources":["/Users/takasivenkatasandeep/Desktop/vamsi-sanjreevi-notes/src/services/firebase.js"],"names":["app","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","firebaseDb","firestore","addUser","email","password","userData","auth","createUserWithEmailAndPassword","collection","doc","user","uid","set","createdAt","FieldValue","serverTimestamp","error","alert","message","logoutUser","signOut","err","loginUser","signInWithEmailAndPassword","addNote","noteData","res","add","id","getUserNotes","data","userdata","where","orderBy","get","forEach","text","userId","getNote","deleteNote","delete"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nconst config = {\n  apiKey: \"AIzaSyD0r_4OlEFv8MKXzZtOcp0_FSalyWxvk8c\",\n  authDomain: \"vamsi-digital-jalebi-notes.firebaseapp.com\",\n  projectId: \"vamsi-digital-jalebi-notes\",\n  storageBucket: \"vamsi-digital-jalebi-notes.appspot.com\",\n  messagingSenderId: \"1031588269195\",\n  appId: \"1:1031588269195:web:8e44df325bd28c1b3c988e\",\n  measurementId: \"G-Z72WY769T3\",\n};\napp.initializeApp(config);\n\nconst firebaseDb = app.firestore();\n\nexport default app;\n\nexport async function addUser(email, password) {\n  try {\n    let userData = await app\n      .auth()\n      .createUserWithEmailAndPassword(email, password);\n    await firebaseDb.collection(\"users\").doc(userData.user.uid).set({\n      email,\n      password,\n      createdAt: app.firestore.FieldValue.serverTimestamp(),\n    });\n  } catch (error) {\n    alert(error.message);\n  }\n}\nexport async function logoutUser() {\n  try {\n    await app.auth().signOut();\n  } catch (err) {\n    alert(err.message);\n  }\n}\nexport async function loginUser(email, password) {\n  try {\n    await app.auth().signInWithEmailAndPassword(email, password);\n  } catch (error) {\n    alert(error.message);\n  }\n}\n\nexport async function addNote(noteData) {\n  const res = await firebaseDb.collection(\"notes\").add({\n    ...noteData,\n    createdAt: app.firestore.FieldValue.serverTimestamp(),\n  });\n  return res.id;\n}\nexport async function getUserNotes(id) {\n  let data = [];\n  let userdata = await firebaseDb\n    .collection(\"notes\")\n    .where(\"userId\", \"==\", id)\n    .orderBy(\"createdAt\", \"desc\")\n    .get();\n  userdata.forEach((doc) => {\n    data = [\n      ...data,\n      {\n        id: doc.id,\n        text: doc.data().text,\n        userId: doc.data().userId,\n      },\n    ];\n  });\n  return data;\n}\nexport async function getNote(id) {\n  let data;\n  let doc = await firebaseDb.collection(\"notes\").doc(id).get();\n  data = {\n    id: doc.id,\n    text: doc.data().text,\n    userId: doc.data().userId,\n  };\n  return data;\n}\n\nexport async function deleteNote(id) {\n  await firebaseDb.collection(\"notes\").doc(id).delete();\n}\n"]},"metadata":{},"sourceType":"module"}